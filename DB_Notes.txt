Python doesn't have any mechanism that effectively restricts access to any instance variable or method. Python prescribes a convention of prefixing the name of the variable/method with single or double underscore to emulate the behaviour of protected and private access specifiers. 

pip install MySQL-python

import MySQLdb

# Open database connection
db = MySQLdb.connect("localhost","testuser","test123","TESTDB" )

# prepare a cursor object using cursor() method
cursor = db.cursor()

# execute SQL query using execute() method.
cursor.execute("SELECT VERSION()")

# Fetch a single row using fetchone() method.
data = cursor.fetchone()
print "Database version : %s " % data

# disconnect from server
db.close()


python manage.py inspectdb Table_Name --database=DataBaseName > filename.py

python manage.py inspectdb > models.py

python manage.py inspectdb Employee_table > models_file.py

python manage.py inspectdb Employee_table --database=db_for_employee > models_file.py

SELECT, UPDATE, DELETE, INSERT, WHERE

-> SQL Statement sent to the RDBMS server

-> List of key elements in SQL

    Queries : Retrieves data against some criteria.
    Statements : Controls transactions, program flow, connections, sessions, or diagnostics.
    Clauses : Components of Queries and Statements.
    Expressions : Combination of symbols and operators and a key part of the SQL statements.
    Predicates : Specifies conditions.
	
Class 						Example
=====						=======
SQL data statements 		SELECT, INSERT, UPDATE, DELETE
SQL connection statements 	CONNECT, DISCONNECT
SQL schema statements 		ALTER, CREATE, DROP
SQL control statements 		CALL, RETURN
SQL diagnostic statements 	GET DIAGNOSTICS
SQL session statements 		SET CONSTRAINT
SQL transaction statements 	COMMIT, ROLLBACK


Database and Table Manipulation

Command 	 																						Description
======= 																							===========
CREATE DATABASE database_name 																		Create a database
DROP DATABASE database_name 	 																	Delete a database
CREATE TABLE "table_name" ("column_1" "column_1_data_type", "column_2" "column_2_data_type", ... ) 	Create a table in a database.
ALTER TABLE table_name ADD column_name column_datatype 	 											Add columns in an existing table.
ALTER TABLE table_name DDROP column_name column_datatype 											Delete columns in an existing table.
DROP TABLE table_name 	 																			Delete a table.

OR, XOR

name like '%United%'

ROUND(population/1000000,2)

-> An SQL JOIN clause combines rows from two or more tables. It creates a set of rows in a temporary table. 

The are two types of SQL JOINS - EQUI JOIN and NON EQUI JOIN

1) SQL EQUI JOIN :

The SQL EQUI JOIN is a simple SQL join uses the equal sign(=) as the comparison operator for the condition. It has two types - SQL Outer join and SQL Inner join.

2) SQL NON EQUI JOIN :

The SQL NON EQUI JOIN is a join uses comparison operator other than the equal sign like >, <, >=, <= with the condition.

The SQL EQUI JOIN can be classified into two types - INNER JOIN and OUTER JOIN

1. SQL INNER JOIN

This type of EQUI JOIN returns all rows from tables where the key record of one table is equal to the key records of another table.

2. SQL OUTER JOIN

This type of EQUI JOIN returns all rows from one table and only those rows from the secondary table where the joined condition is satisfying i.e. the columns are equal in both tables.

SELECT *
  FROM game JOIN goal ON (id=matchid)

The FROM clause says to merge data from the goal table with that from the game table. The ON says how to figure out which rows in game go with which rows in goal

/* SELF JOIN */

> Joining a table data by itself is called as self join.

> Can use with alias name of the table.

> Any no of alias names on a single table.

> Can be impleted on a single table only.

> when we compare a column values with in the same table.

# SELECT e1.name from Employee E1, Employee E2 WHERE E!.salary=E2.salary AND E2.name='smith'

/* RETRIVE METHODS */


1) SELECTION: With where Condition
2) PROJECTION: With out where condition
3) JOINS:
> When we retrive the data from more than one table.

A) ANSI-FORMAT JOINS:
======================================
---> With 'ON' key word join condition

Syntax:
SELECT * /<list of column names> FROM <TN1> <JOIN KEY> <TN2> ON (Joining Condition);

> INNER JOIN:
=============
> Retrive the data from multiple based on an equality condition.
> Common Column.
> The Common column datatype must be same.
> Matching Data/Rows.


> OUTER JOIN: Matching & Un-Matching Data from the table

    * LEFT OUTER JOIN: Retrive the matching data from all tables, But unmatching data from the LEFT HAND side table only.

    * RIGHT OUTER JOIN: Retrive the matching data from all tables, But unmatching data from the RIGHT HAND side table only.
    * FULL OUTER JOIN: Retrive the matching & unmatching data from all tables.

> CROSS JOIN: The Product of Rows.(M x N ROWS)

* To join two or more tables data with out JOIN condition.
* There is no req. A common column in the tables.

> NATURAL JOIN: Not support in SQL
* To avoid duplicate columns from JOIN table.

B) Non-Ansi Format: (Old Style Format)
======================================
---> With 'WHERE' key word Join Condition

1) EQUI-JOIN
============
> Retriving data from multiple tables based on an equality condition. ( = )
> can't use the following operators
  <, >, <=,>=,!<,!>,!=.

2) NON EQUI-JOIN
===============
> Retriving data from multiple tables based on any condition except equal condition.
> can't use ( = ) operator.
> SELF JOIN

Sub Queries / Nested Queries:
============================

1) Non-Corelated sub query:
==========================
> First Inner query, later outer query will execute
> Outer query is always depends on the result of inner query.

2) Corelated sub query:
=======================
> First Outer query, later inner query will execute
> Inner query is always depends on the result of outer query.

